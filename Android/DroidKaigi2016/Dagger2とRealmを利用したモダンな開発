開始日 15:10〜15:40
Androidの最新動向

Hatena
  Hatenaブックマーク開発エンジニア

・フレームワークをロジックから切り離す
  ロジックを抽象化して切り離す

  インスタンス作成箇所
  Activity
    △：結びつき強い

    ◯：利用する外部で生成

    コンストラクタで渡す...
    Parcelableで渡す...

Dagger2：DIコンテナ
 コンパイル時にコード生成し依存解決（Injectする）
  パフォーマンスいい
  デバッグしやすい

Componentの分け方
・Activity、Fragmentごと
  悪い
・役割ごとに分ける
  いい

永続化
目的
  WebAPIのレスポンスを永続化（一貫性を保つため）

  プリファレンス
  SQLite
  Realm

  ▪︎Realm
    ・android 標準なので安心感ある
    ・開発が活発
    ・バージョンが1.0未満

    ・android ios 共通モデル化しやすい
    ・高速

    ・onCreate時にインスタンス作成
     ・更新が起こった場合onChengeで、Adapterから監視することができる

サーバサイド
・APIが必ず先行するとは限らない
・APiに変更があったら面倒

▪︎Stub Server
・ダミーのレスポンスを返すサーバを作る

プロダクトチェック
・デザイナーとの遠隔地での連携
jenkinsでmasterにマージされたらBetaを飛ばす
Slack連携はfastlaneがベター






















Androidには通常のJVMアプリケーションにはないActivityやFragmentといった独自の世界観があるため、Androidの持つ特性を深く考えず実装を行えば、すぐさま複雑なコードが出来上がってしまいます。

また近年ではアプリ開発の需要が増し、さらにその規模も大きくなっています。機能が増え、コードは複雑になりがちです。

この部分を曖昧にし、開発を続けアプリケーションが肥大化していけば、複雑なコードを運用して行かなければならなくなるリスクが高まり、機能追加も難しい環境になってしまいます。

複雑なコードを生み出さないためには、依存性を排除し、テスタブルなコードを書くのが鉄則です。それに加えてActivityの再生成など、Androidフレームワークの挙動にうまく対応する必要があります。

この課題に対して、自力で解決することも出来なくはありません。しかし幸いな事に、2015年現在においては、Androidで利用可能な有益なライブラリが数多く用意されています。我々は様々なライブラリを精査し、その結果「Dagger2」「Realm」を組み合わせることで、フレームワークとうまく調和し、堅牢で、依存性を可能な限り排除し、テスタブルなプロダクトの開発方法を考案しました。

アプリ開発においてもう一つ忘れてはならないのが、サーバサイドとの兼ね合いです。特にサーバサイドをすべて新たに作る時、常にAPIの設計がクライアントアプリに先行し実装されるとは限りません。

この場合、クライアントアプリ側で作業を止めるというのは考えられず、何かしらの策を講じる必要があります。

そこで我々はstubサーバを用意し、Web側開発とは独立した仮のエンドポイントを用意。非常に高速な開発環境を実現することができました。

本セッションの内容が、少しでもみなさまのお役に立てたら幸いかと思います。
CLOSE
